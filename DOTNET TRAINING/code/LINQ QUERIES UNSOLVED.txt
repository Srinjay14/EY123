
/*
public class Employee
{
    public int EmployeeId { get; set; }
    public string EName { get; set; }
    public int DepartmentID { get; set; }
    public List<int> ProjectIDs { get; set; }

}

public class Department
{
    public int DepartmentId { get; set; }
    public string Name { get; set; }
}
public class Project
{
    public int ProjectId { get; set; }
    public string Title { get; set; }
}

internal class Program
{
    private static void Main(string[] args)
    {
        Department[] DeptArray =
        {
            new Department { DepartmentId = 1, Name = "Accounting" },
            new Department { DepartmentId = 2, Name = "Finance" },
            new Department { DepartmentId = 3, Name = "Development" }
        };

        Employee[] EmpArray =
        {
            new Employee { EmployeeId = 1, EName = "Jose", DepartmentID = 1, ProjectIDs = {2, 3} },
            new Employee { EmployeeId = 2, EName = "Carlo", DepartmentID = 2, ProjectIDs = {3, 2} },
            new Employee { EmployeeId = 3, EName = "Pep", DepartmentID = 3, ProjectIDs = {1} },
            new Employee { EmployeeId = 4, EName = "Thomas", DepartmentID = 1, ProjectIDs = {3} },
            new Employee { EmployeeId = 5, EName = "Luis", DepartmentID = 3, ProjectIDs = {1, 3} },
        };

        Project[] ProjArray =
        {
            new Project { ProjectId = 1, Title = "Website Design" },
            new Project { ProjectId = 2, Title = "Stocks Management" },
            new Project { ProjectId = 3, Title = "Data Analytics" },
        };

        // Groups Employees by Department and List them
        
        var deptlist = from e in EmpArray
                       join d in DeptArray on e.DepartmentID equals d.DepartmentId
                       group e by d.Name into grp
                       select new
                       {
                           Department = grp.Key,
                           Employees = grp.ToList()
                       };

        foreach( var item in deptlist )
        { 
            Console.WriteLine($"Department: {item.Department}");
            foreach (var emp in item.Employees)
            {
                Console.WriteLine($" - {emp.EName}");
            }
        }

        // Identify Employees not assigned to any Projects

        var nopro = EmpArray.Where(e => e.ProjectIDs == null || !e.ProjectIDs.Any());

        foreach (var item in nopro)
        {
            Console.WriteLine(item.EName);
        }

        // Determine how many employees are involved in each Project

        var empcount = from e in EmpArray
                       from ProjectID in e.ProjectIDs
                       group e by ProjectID into pgrp
                       select new
                       {
                           ProjectID = pgrp.Key,
                           EmployeeCount = pgrp.Count()
                       };

        foreach (var project in empcount)
        {
            Console.WriteLine($"Project ID: {project.ProjectID} has {project.EmployeeCount} employees");
        }

        // List all Projects that have more than 3 Employees working on it

        var more3 = from e in EmpArray
                    from ProjectID in e.ProjectIDs
                    group e by ProjectID into pgrp
                    where pgrp.Count() > 3
                    select pgrp.Key;

        foreach (var emp in more3)
        {
            Console.WriteLine($"Project ID: {emp}");
        }

        // Calculate the total number of projects in each Department

        var tot = from dept in DeptArray
                  join emp in EmpArray on dept.DepartmentId equals emp.DepartmentID
                  from ProjectID in emp.ProjectIDs
                  group ProjectID by dept.Name into tgrp
                  select new
                  {
                      Department = tgrp.Key,
                      ProjectCount = tgrp.Distinct().Count()
                  };

        foreach(var dept in tot)
        {
            Console.WriteLine($"Department: {dept.Department} has {dept.ProjectCount} unique projects");
        }
    }
}

*/