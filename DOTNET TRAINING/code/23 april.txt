QUEUE

namespace Inheritance
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Queue queue = new Queue();
            queue.Enqueue(3);
            queue.Enqueue(1);
            queue.Enqueue(2);
            queue.Enqueue("Four");

            Console.WriteLine("No. of elements in a queue: {0}", queue.Count);

            while(queue.Count > 0)
            {
                Console.WriteLine(queue.Dequeue());
            }

            Console.WriteLine("No. of elements in a queue: {0}", queue.Count);
        }
    }
}

---------------------------------------------------------------------------------------

STACK

namespace Inheritance
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Stack myStack = new Stack();

            myStack.Push("Hello");
            myStack.Push(null);
            myStack.Push(1);
            myStack.Push(2);   
            myStack.Push(3);    
            myStack.Push(4);
            myStack.Push(5);

            foreach (var item in myStack)
            {
                Console.WriteLine(item);
            }
        }
    }
}

-----------------------------------------------------------------------------------------

HASHTABLE

namespace Inheritance
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Hashtable ht = new Hashtable();

            ht.Add(1, "One");
            ht.Add(2, "Two");
            ht.Add(3, "Three");
            ht.Add(4, "Four");
            ht.Add("Fv", "Five");
            ht.Add(8.5f, 9.5f);

            string strValue1 = (string)ht[2];
            string strValue2 = (string)ht["Fv"];
            float fValue = (float)ht[8.5f];

            Console.WriteLine(strValue1);
            Console.WriteLine(strValue2);
            Console.WriteLine(fValue);
        }
    }
}

------------------------------------------------------------------------------------

EXERCISE 01: LIST OPERATIONS

private static void Main(string[] args)
{
    List<int> list = new List<int>();
    list.Add(1);
    list.Add(2);
    list.Add(3);
    list.Add(4);
    list.Add(5);

    list.Remove(3);

    Console.WriteLine(list.Contains(3)) ;

    foreach (int i in list) { Console.WriteLine(i); }
}

-------------------------------------------------------------------

EXERCISE 02: QUEUE OPERATIONS

private static void Main(string[] args)
{
    Queue<string> qs = new Queue<string>();

    qs.Enqueue("Asia");
    qs.Enqueue("Africa");
    qs.Enqueue("Europe");
    qs.Enqueue("N.America");
    qs.Enqueue("S.America");
    qs.Enqueue("Antarctica");

    qs.Dequeue(); 
    Console.WriteLine(qs.Peek());

    Console.WriteLine(qs.Contains("S.America"));

    while(qs.Count > 0)
    {
        Console.WriteLine(qs.Dequeue());
    }
}

-----------------------------------------------------------------

EXERCISE 03: STACK OPERATIONS

private static void Main(string[] args)
{
    Stack<double> sd = new Stack<double>();

    sd.Push(3.14);
    sd.Push(2.73);
    sd.Push(0.87);
    sd.Push(5.19);

    sd.Pop();
    Console.WriteLine(sd.Peek());

    Console.WriteLine(sd.Contains(3.14));

    while(sd.Count > 0)
    {
        Console.WriteLine(sd.Pop());
    }
}

-----------------------------------------------------------------

EXERCISE 04: ARRAYLIST OPERATIONS

private static void Main(string[] args)
{
    ArrayList al = new ArrayList();
    DateTime date = DateTime.Now;

    al.Add(2);
    al.Add("Two");
    al.Add(2.22d);
    al.Add(date);
    al.Add(222);
    al.Add("Twenty Two");

    al.RemoveAt(1);

    Console.WriteLine(al.IndexOf(2.22d));
    Console.WriteLine();

    object[] array = al.ToArray();

    foreach (var i in array) { Console.WriteLine(i); }
    
}

------------------------------------------------------------------